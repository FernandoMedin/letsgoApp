// Ionic Starter App

// angular.module is a global place for creating, registering and retrieving Angular modules
// 'starter' is the name of this angular module example (also set in a <body> attribute in index.html)
// the 2nd parameter is an array of 'requires'
// 'starter.controllers' is found in controllers.js
angular.module('letsgo',
    ['ionic'
    ,'satellizer'
    ,'chieffancypants.loadingBar'
    ,'ngAnimate'
    ,'letsgo.share'
    ,'letsgo.menu'
    ,'letsgo.login'
    ,'letsgo.dashboard'
    ,'letsgo.profile'
    ,'letsgo.org'
    ,'letsgo.event'
    ])

.run(function($ionicPlatform) {
    $ionicPlatform.ready(function() {
        // Hide the accessory bar by default (remove this to show the accessory bar above the keyboard
        // for form inputs)
        if (window.cordova && window.cordova.plugins.Keyboard) {
            cordova.plugins.Keyboard.hideKeyboardAccessoryBar(true);
        }
        if (window.StatusBar) {
            // org.apache.cordova.statusbar required
            StatusBar.styleDefault();
        }
    });
})
.config(function($stateProvider, $urlRouterProvider) {

    $stateProvider
    .state('intro', {
        url: '/login'
      , templateUrl: 'templates/intro.html'
      , controller: 'LoginController'
    })
    .state('app', {
        url: "/app",
        abstract: true,
        templateUrl: 'templates/menu.html',
        controller: 'MenuController'
    })
    .state('app.dashboard', {
        url: '/dashboard'
      , authenticate: true
      , views: {
            'menuContent': {
                templateUrl: 'templates/dashboard.html'
              , controller: 'DashboardController'
            }
        }
    })
    .state('app.events', {
        url: '/events'
      , cache: false
      , authenticate: true
      , views: {
            'menuContent': {
                templateUrl: 'templates/events/events.html'
              , controller: 'EventController'
            }
        }
    })
    .state('app.event-type', {
        url: '/event-type'
      , authenticate: true
      , views: {
          'menuContent': {
              templateUrl: 'templates/events/event.type.html'
            , controller: 'EventController'
          }
      }
    })
    .state('app.event', {
        url: '/event/:id'
      , authenticate: true
      , views: {
          'menuContent': {
              templateUrl: 'templates/events/event.html'
            , controller: 'EventController'
          }
      }
    })
    .state('app.profile', {
        url: "/profile"
      , authenticate: true
      , views: {
            'menuContent': {
                templateUrl: 'templates/profile.html'
              , controller: 'ProfileController'
            }
        }
    })
    .state('app.friends', {
        url: "/friends"
      , authenticate: true
      , views: {
          'menuContent': {
              templateUrl: 'templates/friends.html'
          }
      }
    })
    .state('app.settings', {
        url: '/settings'
      , views: {
          'menuContent': {
              templateUrl: 'templates/settings.html'
          }
      }
    });
    // if none of the above states are matched, use this as the fallback
    $urlRouterProvider.otherwise('/login');
})
.constant('$', {
    'baseUrl': 'https://shrouded-castle-8160.herokuapp.com/'
})
.config(function($authProvider) {


    // Enable native scrolls for Android platform only,
    // as you see, we're disabling jsScrolling to achieve this.
    // if(ionic.Platform.isAndroid())
        // $ionicConfigProvider.scrolling.jsScrolling(true);

    // Configuration common for all providers.
    var commonConfig = {
      // Popup should expand to full screen with no location bar/toolbar.
      popupOptions: {
        location: 'no',
        toolbar: 'no',
        width: window.screen.width,
        height: window.screen.height
      }
    };

    if (ionic.Platform.isIOS() || ionic.Platform.isAndroid()) {
        $authProvider.platform = 'mobile';
        commonConfig.redirectUri = 'http://localhost/';
    }


    // $authProvider.baseUrl = 'http://localhost:8000/';
    $authProvider.baseUrl = 'https://shrouded-castle-8160.herokuapp.com/';
    $authProvider.loginUrl = '/api-auth/';
    $authProvider.loginRedirect = '/app/dashboard';
    $authProvider.logoutRedirect = '/login';
    $authProvider.signupUrl = '/users/';
    $authProvider.signupRedirect = '/app/dashboard';
    $authProvider.authToken = 'Token';
    $authProvider.facebook(angular.extend({}, commonConfig, {
        clientId: '1393877900943102',
        responseType: 'token'
    }));
})
.run(function($rootScope, $state, $auth){
    $rootScope.$on('$stateChangeStart', function(event, toState, toParams, fromState, fromParams){
        if(toState.authenticate === true){
            if($auth.isAuthenticated() === false) {
                $state.transitionTo('intro');
            }
        }
    });
});

angular.module('letsgo.dashboard', ['letsgo.dashboard.controllers']);

angular.module('letsgo.dashboard.controllers', [])
.controller('DashboardController', DashboardController);

DashboardController.$inject = ['$scope', '$auth'];
function DashboardController($scope, $auth){

}

angular.module('letsgo.event', ['letsgo.event.controllers', 'letsgo.event.services']);

angular.module('letsgo.event.controllers', [])
.controller('EventController', EventController);

EventController.$inject = ['$scope', '$state', '$stateParams', '$filter', '$auth', '$ionicModal', 'EventService', 'OrgService', 'ProfileService'];
function EventController($scope, $state, $stateParams, $filter, $auth, $ionicModal, EventService, OrgService, ProfileService){

    $scope.data = {
        eventType: 'private',
        org: {},
        organization: null
    };

    ProfileService.getProfile().then(function(data){
        $scope.user = data.data;
    });

    EventService.findAll().then(function(data){
        $scope.events = data.data;
        if($stateParams.id)
            $scope.event = $scope.events[$stateParams.id];
    });

    EventService.categories().then(function(data){
        $scope.categories = data.data;
    });

    EventService.types().then(function(data){
        $scope.types = data.data;
    });

    $scope.create = function(data){

        //Set date format yyyy-MM-dd
        data.date = $filter('date')(data.datepicker, 'yyyy-MM-dd');
        data.time = $filter('date')(data.timepicker, 'hh:mm:ss');

        console.log(data);
        data.user = $scope.user.id;
        if($scope.data.eventType === 'private'){
            data.event_type = 1;
            EventService.create(data).then(function(data){
                $scope.events.push(data.data);
                GoBack();
            }).catch(function(err){
                console.log(err);
            });

        } else {
            // Create an Organization
            data.org.premium = false;
            data.org.user = $scope.user.id;
            OrgService.create(data.org).then(function(org){

                data.event_type = 2;
                data.organization = org.id;
                data.user = null;
                EventService.create(data).then(function(data){
                    $scope.events.push(data.data);
                    GoBack();
                }).catch(function(err){
                    console.log(err);
                });
            });
        }

    };

    $ionicModal.fromTemplateUrl('templates/events/modal/event.new.html', {
        scope: $scope
    }).then(function(modal){
        $scope.modal = modal;
    });

    $scope.newModal = function(){
        if($scope.data.eventType === 'public') {
            if(typeof($scope.data.org.name) !== 'undefined')
                $scope.modal.show();
        } else {
            $scope.modal.show();
        }
    };

    $scope.close = function(){
        $scope.modal.hide();
    };

    function GoBack(){
        $scope.modal.hide();
        $state.transitionTo('app.events');
    }
}

angular.module('letsgo.event.services', [])
.service('EventService', EventService)
.service('OrgService', OrgService);

EventService.$inject = ['$http', '$'];
function EventService($http, $){

    this.findAll = function(){
        return $http.get($.baseUrl + 'events/');
    };

    this.categories = function(){
        return $http.get($.baseUrl + 'event_category/');
    };

    this.types = function(){
        return $http.get($.baseUrl + 'event_type/');
    };

    this.create = function(data){
        return $http.post($.baseUrl + 'events/', data);
    };
}

OrgService.$inject = ['$http', '$'];
function OrgService($http, $){

    this.create = function(data){
        return $http.post($.baseUrl + 'organizations/', data);
    };
}

angular.module('letsgo.login', ['letsgo.login.controllers']);

angular.module('letsgo.login.controllers', [])
.controller('LoginController', LoginController);

LoginController.$inject = ['$scope', '$state', '$auth', '$ionicModal', '$ionicPopup', 'ShareService'];
function LoginController($scope, $state, $auth, $ionicModal, $ionicPopup, ShareService ){

    if($auth.isAuthenticated()) {
        console.log("redirect");
        $state.transitionTo('app.dashboard');
    }
    else
        ShareService.wakeUpDynos();

    $scope.login = function() {
        $auth.login({
            email: $scope.email
          , password: $scope.password
        }).then(function(response) {
            // Successful login
            console.log(response);
        }).catch(function(err){
            console.log(JSON.stringify(err));
            if(err.status === 400){
                $ionicPopup.alert({
                    title: 'Erro',
                    template: err.data.non_field_errors
                });
            }
        });
    };

    $scope.signup = function(form) {
        $auth.signup(form).then(function(data){
            console.log(data);
            $scope.closeLogin();
        }).catch(function(err){
            console.log(err);
        });
    };

    $scope.authenticate = function(provider){
        $auth.authenticate(provider).then(function(data){
            $scope.authenticated = true;
            console.log(data);
        }, function(error) {
            console.log(JSON.stringify(error));
        });
    };

    // Create the login modal that we will use later
    $ionicModal.fromTemplateUrl('templates/login.html', {
        scope: $scope
    }).then(function(modal) {
        $scope.modal = modal;
    });

    $scope.signupModal = function() {
        $scope.modal.show();
    };

    $scope.closeLogin = function() {
        $scope.modal.hide();
    };
}

angular.module('letsgo.menu.controllers', [])

.controller('MenuController', function($scope, $ionicModal, $timeout, $auth, ProfileService) {
    // Form data for the login modal
    $scope.loginData = {};

    ProfileService.getProfile().then(function(data){
        $scope.user = data.data;
    });

    // Create the login modal that we will use later
    $ionicModal.fromTemplateUrl('templates/login.html', {
        scope: $scope
    }).then(function(modal) {
        $scope.modal = modal;
    });

    // Triggered in the login modal to close it
    $scope.closeLogin = function() {
        $scope.modal.hide();
    };

    // Open the login modal
    $scope.login = function() {
        $scope.modal.show();
    };

    $scope.logout = function() {
        $auth.logout();
    };

    // Perform the login action when the user submits the login form
    $scope.doLogin = function() {
        console.log('Doing login', $scope.loginData);

        // Simulate a login delay. Remove this and replace with your login
        // code if using a login system
        $timeout(function() {
            $scope.closeLogin();
        }, 1000);
    };
})

.controller('PlaylistsCtrl', function($scope) {
    $scope.playlists = [
        { title: 'Eventos', id: 1 }
    ];
})

.controller('PlaylistCtrl', function($scope, $stateParams) {
});

angular.module('letsgo.menu', ['letsgo.menu.controllers']);

angular.module('letsgo.org', ['letsgo.org.services']);


angular.module('letsgo.org.services', [])
.service('OrgService', OrgService);

OrgService.$inject = ['$http', '$'];
function OrgService($http, $){

    this.create = function(data){
        return $http.post($.baseUrl+ 'organizations/', data);
    };
}

angular.module('letsgo.profile', ['letsgo.profile.controllers', 'letsgo.profile.services']);

angular.module('letsgo.profile.controllers', [])
.controller('ProfileController', ProfileController);


ProfileController.$inject = ['$scope', '$auth', 'ProfileService'];
function ProfileController($scope, $auth, ProfileService){
    ProfileService.getProfile().then(function(data){
        $scope.user = data.data;
        ProfileService.current = $scope.user;
    });
}

angular.module('letsgo.profile.services', [])
.service('ProfileService', ProfileService);

ProfileService.$inject = ['$http', '$auth', '$'];
function ProfileService($http, $auth, $){

    this.current;

    this.getProfile = function(){
        return $http.get($.baseUrl+'current/');
    };

    this.getUser = function(id){
        return $http.get($.baseUrl+'users/'+id);
    };

    this.getCurrent = function(){
        console.log(this.current);
        return this.current;
    };
}

angular.module('letsgo.share', ['letsgo.share.services']);

angular.module('letsgo.share.directive', [])
.directive('loading', function(){
    return {
        restrict: 'E',
        replace: true,
        templateUrl: '/js/app/share/directives/loading.html',
        link: function(scope, element, attrs) {
            scope.$on('$destroy', function(){
                console.log('destroyed');
                element.remove();
            });
        }
    };
});

angular.module('letsgo.share.services', [])
.service('ShareService', ShareService);

ShareService.$inject = ['$http'];
function ShareService($http){

    this.wakeUpDynos = function(){
        return $http.get('https://shrouded-castle-8160.herokuapp.com');
    };
}
